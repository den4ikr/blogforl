{"version":3,"sources":["components/Header/Header.tsx","components/PostBlock/PostBlockStyle.js","components/PostBlock/AddComment/AddComment.tsx","components/PostBlock/Comments/Comment.tsx","components/PostBlock/PostBlock.tsx","api/api.ts","redux/block-reducer.ts","components/PostBlock/PostBlockContainer.tsx","components/Posts/AddPost/AddPostStyle.js","components/Posts/AddPost/AddPost.tsx","components/Posts/PostsStyle.js","components/Posts/Posts.tsx","redux/posts-reducer.ts","components/Posts/PostsContainer.tsx","redux/app-reducer.ts","assets/Blocks-1s-200px.svg","components/Preloader/PreloaderStyle.js","components/Preloader/Preloader.tsx","App.tsx","reportWebVitals.ts","redux/redux-store.ts","index.tsx"],"names":["Header","className","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","href","useStyles","createUseStyles","title","fontSize","padding","textDecoration","body","paddingLeft","postWrapper","minHeight","boxShadow","marginTop","paddingRight","paddingBottom","button","paddingTop","display","existTitle","textAlign","comment","marginLeft","editModeBlock","editModeButton","commentBody","commentTitle","AddComment","props","s","useState","gotToEditMode","setGoToEditMode","setComment","onChange","e","target","value","placeholder","onClick","addComment","block","Comments","comments","Object","values","map","PostBlock","deleted","setDeleted","Comment","deleteBlock","instance","axios","create","baseURL","API","get","postId","post","delete","SET_BLOCK","initialState","setBlock","BlockReducer","state","action","WithUrlDataContainerComponent","withRouter","useEffect","match","params","getBlock","connect","dispatch","a","response","data","inputBlock","maxWidth","error","color","errorBlock","marginBottom","AddPost","initialValues","validate","errors","onSubmit","setSubmitting","addPost","isSubmitting","name","component","input","buttonBlock","Posts","SET_DATA","setData","getData","PostsReducer","posts","INITIAL_SUCCESS","initilised","AppReducer","preloaderWrapper","width","height","justifyContent","Preloader","alt","src","loading","app","initiliseApp","promise","Promise","all","then","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa0b6fc8.chunk.js","sourcesContent":["import {NavLink} from \"react-router-dom\";\r\n\r\nconst Header: React.FunctionComponent = () => {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n            <NavLink className=\"navbar-brand\" to=\"#\">React</NavLink>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                <ul className=\"navbar-nav\">\r\n                    <li className=\"nav-item\">\r\n                        <NavLink to = \"/\" className=\"nav-link\" href=\"#\">Main</NavLink>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Header;","import {createUseStyles} from 'react-jss'\r\n\r\nconst useStyles  = createUseStyles ({\r\n    title: {\r\n        fontSize: \"25px\",\r\n        padding: \"20px 0px 15px 25px\",\r\n        textDecoration: \"none\",\r\n    },\r\n    body: {\r\n        fontSize: \"20px\",\r\n        paddingLeft: \"25px\",\r\n    },\r\n    postWrapper: {\r\n        minHeight: \"150px\",\r\n        boxShadow: \"rgba(149, 157, 165, 0.2) 0px 8px 24px\",\r\n        marginTop: \"55px\",    \r\n        paddingRight: \"20px\",\r\n        paddingBottom: \"20px\",\r\n    },\r\n    button: {\r\n        paddingLeft: \"25px\",\r\n        paddingTop: \"25px\",\r\n        display: 'flex',\r\n        \r\n    },\r\n    existTitle: {\r\n        textAlign: \"center\",\r\n        fontSize: \"25px\",\r\n        paddingTop: \"50px\"\r\n    },\r\n    comment: {\r\n        marginLeft: \"25px\",\r\n    },\r\n    editModeBlock: {\r\n        display: 'flex',\r\n    },\r\n    editModeButton: {\r\n        marginLeft: \"15px\",\r\n    },\r\n    commentBody: {\r\n        paddingLeft: \"25px\",\r\n        fontSize: \"20px\",\r\n        paddingTop: \"15px\",\r\n    },\r\n    commentTitle: {\r\n        paddingLeft: \"25px\",\r\n        fontSize: \"25px\",\r\n        paddingTop: \"25px\",\r\n    }\r\n})\r\n\r\nexport default useStyles;","import { useState } from \"react\";\r\nimport { GetPostBlockType } from \"../../../types/types\";\r\nimport useStyles from \"../PostBlockStyle\";\r\n\r\ntype PropsType = {\r\n    block: GetPostBlockType,\r\n    addComment: (postId: number, body: string) => void,\r\n}\r\n\r\nconst AddComment: React.FunctionComponent <PropsType> = (props) => {\r\n    const s = useStyles ();\r\n\r\n    const [gotToEditMode, setGoToEditMode] = useState(false);\r\n    const goToAddCommentMode = (e: any) => {\r\n        setGoToEditMode(true);\r\n    }\r\n\r\n    const [comment, setComment] = useState(\"\");\r\n    const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setComment(e.target.value);\r\n    }\r\n\r\n    const addComment = () => {\r\n        props.addComment(props.block.id, comment)\r\n        setComment(\"\");\r\n    }\r\n\r\n    return (\r\n        <div className={s.comment} >\r\n            {gotToEditMode\r\n                ? <div className={s.editModeBlock} >\r\n                    <div>\r\n                        <input onChange={onChangeHandler} placeholder=\"Enter your comment...\" className=\"form-control\" type=\"text\" value={comment} />\r\n                    </div>\r\n                    <div className={s.editModeButton} >\r\n                        <button onClick={addComment} className=\"btn btn-secondary\" >Add Comment</button>\r\n                    </div>\r\n                </div>\r\n                : <div>\r\n                    <button onClick={goToAddCommentMode} className=\"btn btn-secondary\" >\r\n                        Add Comment\r\n                    </button>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddComment;","import useStyles from \"../PostBlockStyle\";\r\n\r\ntype PropsType = {\r\n    comments: {\r\n        postId: number,\r\n        body: string,\r\n        id: number,\r\n    }\r\n}\r\n\r\nconst Comments: React.FunctionComponent<PropsType> = (props) => {\r\n    const s = useStyles();\r\n    return (\r\n        <div>\r\n            <div className={s.commentTitle} >\r\n                Comments:\r\n            </div>\r\n            {props.comments &&\r\n                Object.values(props.comments).map(comment => {\r\n                    //@ts-ignore\r\n                    return <div key = {comment.id} className={s.commentBody} >{comment.body}</div>\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Comments;","import { useState } from \"react\";\r\nimport { GetPostBlockType } from \"../../types/types\";\r\nimport AddComment from \"./AddComment/AddComment\";\r\nimport Comments from \"./Comments/Comment\";\r\nimport useStyles from \"./PostBlockStyle\";\r\n\r\ntype PropsType = {\r\n    block: GetPostBlockType,\r\n    deleteBlock: (postId: number) => void,\r\n    addComment: (postId: number, body: string) => void,\r\n}\r\n\r\nconst PostBlock: React.FunctionComponent <PropsType> = (props) => {\r\n\r\n    const s = useStyles ();\r\n\r\n    const [ deleted, setDeleted ] = useState (false);\r\n    const deletePost = () => {\r\n        if (props.block) {\r\n            props.deleteBlock (props.block.id);\r\n            setDeleted (true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className = {s.postWrapper} >\r\n            {deleted\r\n                ? <div className = {s.existTitle} >\r\n                    Post Does Not Exist\r\n                </div>\r\n                : <div>\r\n                    {props.block && \r\n                    <div>\r\n                        <div className = {s.title} >\r\n                            {props.block.title}\r\n                        </div>\r\n                        <div className = {s.body} >\r\n                            {props.block.body}\r\n                        </div>\r\n                        <div>\r\n                            <Comments comments = {props.block.comments} />\r\n                        </div>\r\n                        <div>\r\n                            {props.block.title && \r\n                                <div className = {s.button} >\r\n                                    <div>\r\n                                        <button className = \"btn btn-secondary\" onClick = { deletePost } >\r\n                                            Delete Post\r\n                                        </button>\r\n                                    </div>\r\n                                    <div>\r\n                                        <AddComment block = {props.block} addComment = {props.addComment} />\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    </div>}\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostBlock;","import axios from \"axios\";\r\n\r\nconst instance = axios.create ({\r\n    baseURL: \"https://simple-blog-api.crew.red/posts\"\r\n})\r\n\r\nexport const API = {\r\n    getPosts: () => {\r\n        return instance.get (``);\r\n    },\r\n    getPostBlock: (postId: number) => {\r\n        return instance.get (`/${postId}?_embed=comments`)\r\n    },\r\n    createPost: (title: string, body: string) => {\r\n        return instance.post (``, {title, body})\r\n    },\r\n    deletePost: (postId: number) => {\r\n        return instance.delete (`${postId}`)\r\n    },\r\n    createComent: (postId: number, body: string) => {\r\n        return instance.post (`https://simple-blog-api.crew.red/comments`, {postId, body})\r\n    }\r\n}","import { AppStateType } from './redux-store';\r\nimport { API } from '../api/api';\r\nimport { GetPostBlockType } from '../types/types';\r\nimport { ThunkAction } from \"redux-thunk\";\r\n\r\nconst SET_BLOCK = \"SET_BLOCK\";\r\n\r\nconst initialState = {\r\n    block: {} as GetPostBlockType,\r\n}\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst BlockReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_BLOCK:\r\n            return { ...state, block: action.block }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionsTypes = SetBlockActionType\r\n\r\ntype ThunkType = ThunkAction <Promise <void>, AppStateType, unknown, ActionsTypes>\r\n\r\nexport const setBlock = (block: GetPostBlockType): SetBlockActionType => ( { type: SET_BLOCK, block } as const );\r\ntype SetBlockActionType = {\r\n    type: typeof SET_BLOCK,\r\n    block: GetPostBlockType,\r\n}\r\n\r\nexport const getBlock = (postId: number) => async (dispatch: any) => {\r\n    const response = await API.getPostBlock (postId)\r\n    dispatch (setBlock (response.data))\r\n}\r\n\r\nexport const deleteBlock = (postId: number): ThunkType => async (dispatch) => {\r\n    const response = await API.deletePost (postId);\r\n}\r\n\r\nexport const addComment = (postId: number, body: string): ThunkType => async (dispatch) => {\r\n    await API.createComent (postId, body);\r\n    const response = await API.getPostBlock (postId);\r\n    if (response) {\r\n        dispatch (setBlock (response.data));\r\n    }\r\n}\r\n\r\nexport default BlockReducer;","import PostBlock from \"./PostBlock\";\r\nimport { useEffect } from \"react\";\r\nimport { getBlock, deleteBlock, addComment } from \"../../redux/block-reducer\";\r\nimport { AppStateType } from \"../../redux/redux-store\";\r\nimport { connect } from \"react-redux\";\r\nimport { GetPostBlockType } from \"../../types/types\";\r\nimport { withRouter } from \"react-router\";\r\n\r\ntype PropsType = {\r\n    block: GetPostBlockType,\r\n    getBlock: (postId: number) => void,\r\n    deleteBlock: (postId: number) => void,\r\n    addComment: (postId: number, body: string) => void,\r\n}\r\n\r\nconst PostBlockContainer: React.FunctionComponent <PropsType> = (props) => {\r\n    \r\n    useEffect ( () => {\r\n        //@ts-ignore\r\n        const postId = props.match.params.postId\r\n\r\n        props.getBlock (postId);\r\n    }, [] )\r\n\r\n    return (\r\n        <PostBlock { ...props } />\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        block: state.block.block,\r\n    }\r\n}\r\n\r\n//@ts-ignore\r\nconst WithUrlDataContainerComponent = withRouter (PostBlockContainer);\r\n\r\nexport default connect (mapStateToProps, {getBlock, deleteBlock, addComment})(WithUrlDataContainerComponent);","import {createUseStyles} from 'react-jss'\r\n\r\nconst useStyles  = createUseStyles ({\r\n    inputBlock: {\r\n        maxWidth: \"450px\",\r\n    },\r\n    error: {\r\n        color: \"red\",        \r\n    },\r\n    errorBlock: {\r\n        marginBottom: \"25px\",\r\n    }\r\n})\r\n\r\nexport default useStyles;","import {Formik, Form, Field, ErrorMessage} from \"formik\";\r\nimport useStyles from \"./AddPostStyle\";\r\n\r\ntype PropsType = {\r\n  addPost: (title: string, body: string) => void,\r\n}\r\n\r\nconst AddPost: React.FunctionComponent <PropsType> = (props) => {\r\n\r\n  const s = useStyles ();\r\n\r\n  return (\r\n    <div>\r\n      <Formik\r\n        initialValues={{ title: '', body: '' }}\r\n        validate={values => {\r\n          const errors: any = {};\r\n          if (!values.title) {\r\n            errors.title = 'Required';\r\n          } \r\n          if (!values.body) {\r\n            errors.body = \"Required\"\r\n          }\r\n          return errors;\r\n        }}\r\n        onSubmit={(values, { setSubmitting }) => {\r\n          props.addPost (values.title, values.body);\r\n          values.title = \"\";\r\n          values.body = \"\";\r\n        }}\r\n      >\r\n        {({ isSubmitting }) => (\r\n          <Form>\r\n            <div className = {s.inputBlock} >\r\n              <Field className = \"form-control\" type=\"text\" name=\"title\" placeholder = \"Enter Title\" />\r\n            </div>\r\n            <div className = {s.errorBlock} >\r\n              <ErrorMessage className = {s.error} name=\"title\" component=\"div\" />\r\n            </div>\r\n            <div className = {s.inputBlock} >\r\n              <Field className = \"form-control\" type=\"text\" name=\"body\" placeholder = \"Enter some text\" />\r\n            </div>\r\n            <div className = {s.errorBlock} >\r\n              <ErrorMessage className = {s.error} name=\"body\" component=\"div\" />\r\n            </div>\r\n            <button className = \"btn btn-secondary\" type=\"submit\">\r\n              Submit\r\n           </button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddPost;","import {createUseStyles} from 'react-jss'\r\n\r\nconst useStyles  = createUseStyles ({\r\n    title: {\r\n        fontSize: \"25px\",\r\n        padding: \"20px 0px 15px 25px\",\r\n        textDecoration: \"none\",\r\n    },\r\n    body: {\r\n        fontSize: \"20px\",\r\n        paddingLeft: \"25px\",\r\n    },\r\n    postWrapper: {\r\n        minHeight: \"150px\",\r\n        boxShadow: \"rgba(149, 157, 165, 0.2) 0px 8px 24px\",\r\n        marginTop: \"55px\",\r\n        paddingRight: \"20px\",\r\n        paddingBottom: \"20px\",\r\n\r\n    },\r\n    inputBlock: {\r\n        marginTop: \"55px\",\r\n    },\r\n    input: {\r\n        marginTop: \"10px\",\r\n    },\r\n    buttonBlock: {\r\n        marginTop: \"10px\",\r\n    }\r\n})\r\n\r\nexport default useStyles;","import { NavLink } from \"react-router-dom\";\r\nimport { PostType } from \"../../types/types\";\r\nimport AddPost from \"./AddPost/AddPost\";\r\nimport useStyles from \"./PostsStyle\";\r\n\r\ntype Propstype = {\r\n    data: Array <PostType>,\r\n    addPost: (title: string, body: string) => void,\r\n}\r\n\r\nconst Posts: React.FunctionComponent <Propstype> = (props) => {\r\n    const s = useStyles ();\r\n\r\n    return (\r\n        <div>\r\n            <div className = {s.inputBlock} >\r\n                <AddPost addPost = {props.addPost} />\r\n            </div>\r\n            <div>\r\n                {props.data.map (post => {\r\n                    return (\r\n                        <div className = {s.postWrapper} key = {post.id} >\r\n                            <div className = {s.title} >\r\n                                <NavLink to = {\"postblock/\" + post.id} >\r\n                                    {post.title}\r\n                                </NavLink>\r\n                            </div>\r\n                            <div className = {s.body} >\r\n                                {post.body}\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Posts;","import { AppStateType } from './redux-store';\r\nimport { API } from './../api/api';\r\nimport { PostType } from './../types/types';\r\nimport { ThunkAction } from \"redux-thunk\";\r\n\r\nconst SET_DATA = \"SET_DATA\";\r\n\r\nlet initialState = {\r\n    data: [] as Array <PostType>,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst PostsReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_DATA:\r\n            return { ...state, data: action.data }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionsTypes = SetDataActionType\r\n\r\nexport const setData = (data: Array <PostType>): SetDataActionType => ( { type: SET_DATA, data } );\r\ntype SetDataActionType = {\r\n    type: typeof SET_DATA,\r\n    data: Array <PostType>,\r\n}\r\n\r\n//=================================\r\ntype ThunkType = ThunkAction <Promise <void>, AppStateType, unknown, ActionsTypes>\r\n\r\nexport const getData = (): ThunkType => async (dispatch) => {\r\n    const response = await API.getPosts ();\r\n    dispatch (setData (response.data))\r\n}\r\n\r\nexport const addPost = (title: string, body: string): ThunkType => async (dispatch) => {\r\n    await API.createPost (title, body);\r\n    const response = await API.getPosts ();\r\n    if (response) {\r\n        debugger\r\n        dispatch (setData (response.data))\r\n    }\r\n}\r\n\r\nexport default PostsReducer;","import { useEffect } from \"react\"\r\nimport { connect } from \"react-redux\"\r\nimport { AppStateType } from \"../../redux/redux-store\"\r\nimport { PostType } from \"../../types/types\"\r\nimport Posts from \"./Posts\"\r\nimport { getData, addPost } from \"../../redux/posts-reducer\";\r\n\r\ntype PropsType = {\r\n    getData: () => void,\r\n    addPost: (title: string, body: string) => void,\r\n    data: Array <PostType>\r\n}\r\n\r\nconst PostsContainer: React.FunctionComponent <PropsType> = (props) => {\r\n\r\n    useEffect ( () => {\r\n        props.getData ();\r\n    }, [] )\r\n\r\n    return (\r\n        <Posts data = {props.data} addPost = {props.addPost} />\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        data: state.posts.data,\r\n    }\r\n}\r\n\r\nexport default connect (mapStateToProps, {getData, addPost} )(PostsContainer);","import { getData } from \"./posts-reducer\";\r\n\r\nconst INITIAL_SUCCESS = \"INITIAL_SUCCESS\";\r\n\r\nlet initialState = {\r\n    initilised: false,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nconst AppReducer = (state = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case INITIAL_SUCCESS:\r\n            return { ...state, initilised: true }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const initialedSuccess = () => ( { type: INITIAL_SUCCESS } );\r\n\r\nexport const initiliseApp = () => (dispatch: any) => {\r\n    let promise = dispatch (getData ())\r\n    Promise.all ([promise])\r\n        .then ( () => {\r\n            dispatch (initialedSuccess ());\r\n        } )\r\n}\r\n\r\nexport default AppReducer;","export default __webpack_public_path__ + \"static/media/Blocks-1s-200px.b67ad5ee.svg\";","import {createUseStyles} from 'react-jss'\r\n\r\nconst useStyles  = createUseStyles ({\r\n    preloaderWrapper: {\r\n        width:\"100%\",\r\n        height:\"100%\",\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n    }\r\n})\r\n\r\nexport default useStyles;","import loading from \"../../assets/Blocks-1s-200px.svg\";\r\nimport useStyles from \"./PreloaderStyle\";\r\n\r\nconst Preloader = () => {\r\n    const s = useStyles ();\r\n\r\n    return (\r\n        <div className = {s.preloaderWrapper} >\r\n            <img alt = \"Preloader\" src = {loading} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;","import { Route } from 'react-router-dom';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport PostBlockContainer from './components/PostBlock/PostBlockContainer';\nimport PostsContainer from './components/Posts/PostsContainer';\nimport { AppStateType } from './redux/redux-store';\nimport { initiliseApp } from \"./redux/app-reducer\";\nimport { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport Preloader from './components/Preloader/Preloader';\n\ntype PropsType = {\n  initilised: boolean,\n  initiliseApp: () => void,\n}\n\nconst App: React.FunctionComponent <PropsType> = (props) => {\n\n  useEffect ( () => {\n    props.initiliseApp ()\n  }, [] )\n\n  if (!props.initilised) {\n    return (\n      <Preloader />\n    )\n  }\n\n  return (\n    <div>\n      <Header />\n      <div className = \"container\" >\n        <Route exact path = \"/\" render = { () => <PostsContainer /> } />\n        <Route exact path = \"/postblock/:postId?\" render = { () => <PostBlockContainer /> } />\n      </div>\n    </div>\n  );\n}\n\nlet mapStateToProps = (state: AppStateType) => {\n  return {\n    initilised: state.app.initilised,\n  }\n}\n\nexport default connect (mapStateToProps, {initiliseApp})(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport AppReducer from \"./app-reducer\";\r\nimport BlockReducer from \"./block-reducer\";\r\nimport PostsReducer from \"./posts-reducer\";\r\n\r\nconst reducers = combineReducers ({\r\n    posts: PostsReducer,\r\n    block: BlockReducer,\r\n    app: AppReducer,\r\n})\r\n\r\ntype ReducersType = typeof reducers\r\nexport type AppStateType = ReturnType <ReducersType>\r\n\r\nconst store = createStore (reducers, applyMiddleware (thunkMiddleware));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from \"./redux/redux-store\";\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store = {store} >\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}